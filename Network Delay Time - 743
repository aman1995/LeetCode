class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
        int graph[][] = new int[n+1][n+1];
        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a,b) -> {
            return a[1] - b[1];
        });
        createGraph(times, graph);
        int vis[] = new int[n+1];
        pq.offer(new int[]{k,0});
        int totalTime=0;
        while(!pq.isEmpty()){
            int ele[] = pq.poll();
            int node = ele[0];
            int timeForNode = ele[1];
           
            if(vis[node] != 1) {
                totalTime = Math.max(totalTime, timeForNode);
                for(int i=0;i<=n;i++){
                    if(graph[node][i] == -1 || vis[i] == 1) 
                        continue;
                    int travelTime = graph[node][i];
                    pq.offer(new int[]{i, timeForNode + travelTime});
                }
            }
             vis[node] = 1;
        }
        
        for(int i=1; i<vis.length; i++){
            if(vis[i] == 0)
                return -1;
        }
                
        return totalTime;        
        
    }
    
    
    public static void createGraph(int arr[][], int graph[][]){
        for(int ar[]: graph){
            Arrays.fill(ar, -1);
        }
        for(int ar[] : arr){
            graph[ar[0]][ar[1]] = ar[2];
        }
    }
}
