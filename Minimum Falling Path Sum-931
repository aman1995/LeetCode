class Solution {
    static Long[][] dp;
    public int minFallingPathSum(int[][] A) {
        int min = Integer.MAX_VALUE;
        dp = new Long[A.length][A[0].length];
        
        for(int i=0;i<A.length;i++){
            min = Math.min(min, (int)dfs(0,i,A));
        }
        return min;
    }
    
    public static long dfs(int row, int col, int a[][]){
        
        
        if(row>=a.length)
            return 0;
        
        if(col>=a[0].length || col<0)
            return Integer.MAX_VALUE;
       
        if(dp[row][col] != null)
            return dp[row][col];
        
        long cursum = a[row][col];
        
        long first = dfs(row+1,col,a);
        long second = dfs(row+1,col-1,a);
        long third = dfs(row+1,col+1,a);
        
        return dp[row][col] = cursum + Math.min(first,Math.min(second,third));
        
    }
}
